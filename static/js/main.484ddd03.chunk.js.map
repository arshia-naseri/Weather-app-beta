{"version":3,"sources":["api-url-links.js","city-list.js","CurrentWeatherCondition.js","CityName.js","HourlyForcastItem.js","HourlyForcast.js","DailyForcastItem.js","DailyForcast.js","CityItem.js","CityList.js","toggle-button.js","ToggleMessuringType.js","App.js","index.js"],"names":["currentConditionsURL","hourlyForcastURL","dailyForcastURL","cityList","cityName","apiID","initURL","cityID","find","elm","key","getCurrentConditionsURL","getHourlyForcastURL","getDailyForcastURL","CurrentWeatherCondition","tempDigit","imageSource","feelsTemp","currentWeatherText","humidity","windSpeed","windDirection","highTemp","lowTemp","className","Math","round","Value","Unit","src","CityName","cityLocation","HourlyForcastItem","forcastItem","isMetric","Time","WeatherIcon","Temperature","Metric","Imperial","HourlyForcast","hourlyForcastList","map","Key","DayName","width","Maximum","Minimum","DailyForcast","dailyForcastList","CityItem","city","selectCity","currentCity","onClick","CityList","toggleButton","toggleClick","ToggleMessuringType","App","todayTempHighLow","useState","weather","setWeather","hourlyForcast","setHourlyForcast","dailyForcast","setDailyForcast","setCity","setIsMetric","loadCurrentCondition","setLoadCurrentCondition","loadHourlyForcast","setLoadHourlyForcast","loadDailyForcast","setLoadDailyForcast","newHourlyForcast","newDailyForcast","backgroundImageStyle","getDailyForcast","cancel","axios","get","apiURLs","cancelToken","CancelToken","c","then","res","data","DailyForecasts","getCurrentCondition","getHourlyForcast","showSideBarMenu","e","darkBackgroundElm","document","getElementsByClassName","sideMenuPanel","sideMenuButton","style","display","classList","add","remove","useEffect","countElement","forEach","hour","newElm","time","parseInt","DateTime","split","push","cleanOutHourlyForcast","day","dayName","Date","getDay","Day","Icon","splice","cleanOutDailyForcast","IsDayTime","cities","target","contains","parentElement","innerHTML","RealFeelTemperature","WeatherText","RelativeHumidity","Wind","Speed","Direction","English","ReactDOM","render","StrictMode","getElementById"],"mappings":"iJAEIA,EACAC,EACAC,E,wDCeW,GAACC,SAnBC,CACb,CACIC,SAAU,UACVC,MAAO,OACT,CACED,SAAU,aACVC,MAAO,OACT,CACED,SAAU,WACVC,MAAO,OACT,CACED,SAAU,SACVC,MAAO,OACT,CACED,SAAU,SACVC,MAAO,SDiBA,OAACC,QAzBhB,SAAiBF,GACb,IAAIG,EAAUJ,EAASA,SAASK,MAAK,SAACC,GAAD,OAASA,EAAIL,WAAaA,KAAWC,MAGtEK,EAAM,mCAEVV,EAAoB,kEAA8DO,EAA9D,mBAA+EG,EAA/E,iBACpBT,EAAgB,wEAAoEM,EAApE,mBAAqFG,EAArF,gBAChBR,EAAe,qEAAiEK,EAAjE,mBAAkFG,EAAlF,iBAiBMC,wBAbzB,WACI,OAAOX,GAYuCY,oBATlD,WACI,OAAOX,GAQ4DY,mBALvE,WACI,OAAOX,I,OE5BI,SAASY,EAAT,GAAiJ,IAA/GC,EAA8G,EAA9GA,UAAWC,EAAmG,EAAnGA,YAAaC,EAAsF,EAAtFA,UAAWC,EAA2E,EAA3EA,mBAAoBC,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,QAClJ,OAEI,0BAASC,UAAU,wBAAnB,UACI,0BAASA,UAAU,+BAAnB,UACI,0BAASA,UAAU,sBAAnB,UACI,0BAASA,UAAU,kBAAnB,UAAsCC,KAAKC,MAAMX,EAAUY,OAA3D,UACA,yBAASH,UAAU,gBAAnB,SAAoCT,EAAUa,UAElD,0BAASJ,UAAU,eAAnB,oBAA0CC,KAAKC,MAAMT,EAAUU,OAA/D,UACA,0BAASH,UAAU,2BAAnB,gBAAkDF,EAAlD,UACA,0BAASE,UAAU,0BAAnB,gBAAiDD,EAAjD,aAEJ,sBAAKC,UAAU,wBAAf,UACI,qBAAKA,UAAU,qBAAqBK,IAAKb,IACzC,yBAASQ,UAAU,qBAAnB,SAAyCN,IAEzC,0BAASM,UAAU,uBAAnB,UACI,0BAASA,UAAU,kBAAnB,uBAA+C,8BAAIL,EAAJ,UAC/C,0BAASK,UAAU,cAAnB,mBAAuC,8BAAIC,KAAKC,MAAMN,EAAUO,OAAzB,IAAkCP,EAAUQ,WACnF,0BAASJ,UAAU,mBAAnB,wBAAiD,4BAAIH,gBCpB1D,SAASS,EAAT,GAAkC,IAAfC,EAAc,EAAdA,aAC9B,OACI,yBAASP,UAAU,sBAAnB,SACKO,ICFE,SAASC,EAAT,GAAoD,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,SACpD,OACI,0BAASV,UAAU,oBAAnB,UACI,qBAAKA,UAAU,oBAAf,SAAoCS,EAAYE,OAChD,qBAAKX,UAAU,qBAAqBK,IAAK,uBAAwBI,EAAYG,YAAa,SAC1F,sBAAKZ,UAAU,oBAAf,UAAqCU,EAAYD,EAAYI,YAAYC,OAAOX,MAAQM,EAAYI,YAAYE,SAASZ,MAAzH,aCHG,SAASa,EAAT,GAAsD,IAA9BC,EAA6B,EAA7BA,kBAAmBP,EAAU,EAAVA,SAEtD,OACQ,yBAASV,UAAU,uBAAnB,SACKiB,EAAkBC,KAAI,SAAAT,GACvB,OAAO,cAACD,EAAD,CAAyCC,YAAaA,EAAaC,SAAUA,GAArDD,EAAYU,UCP5C,SAASX,EAAT,GAAoD,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,SACpD,OACI,0BAASV,UAAU,mBAAnB,UACI,qBAAKA,UAAU,eAAf,SAA+BS,EAAYW,UAC3C,qBAAKpB,UAAU,oBAAoBqB,MAAM,OAAMhB,IAAK,uBAAwBI,EAAYG,YAAa,SACrG,sBAAKZ,UAAU,0BAAf,UAA2CU,EAAYD,EAAYI,YAAYS,QAAQR,OAAOX,MAAQM,EAAYI,YAAYS,QAAQP,SAASZ,MAA/I,UACA,sBAAKH,UAAU,yBAAf,UAA0CU,EAAYD,EAAYI,YAAYU,QAAQT,OAAOX,MAAQM,EAAYI,YAAYU,QAAQR,SAASZ,MAA9I,aCJG,SAASqB,EAAT,GAAoD,IAA7BC,EAA4B,EAA5BA,iBAAkBf,EAAU,EAAVA,SAEpD,OACQ,yBAASV,UAAU,uBAAnB,SACKyB,EAAiBP,KAAI,SAAAT,GACtB,OAAO,cAAC,EAAD,CAAwCA,YAAaA,EAAaC,SAAUA,GAArDD,EAAYU,UCR3C,SAASO,EAAT,GAAoD,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,YAGjD,OACI,0BAAS7B,UAAS,0BAAsB6B,IAAgBF,EAAK/C,SAAS,eAAe,IAAMkD,QAASF,EAApG,UACI,qBAAK5B,UAAU,gBACf,qBAAKA,UAAU,cAAf,SAA8B2B,EAAK/C,cCLhC,SAASmD,EAAT,GAAuD,IAApCpD,EAAmC,EAAnCA,SAAUiD,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,YACpD,OACI,yBAAS7B,UAAU,kBAAnB,SACKrB,EAASuC,KAAI,SAAAS,GACV,OAAO,cAACD,EAAD,CAA2BC,KAAMA,EAAMC,WAAYA,EAAYC,YAAaA,GAA7DF,EAAK9C,YCL5B,SAASmD,EAAT,GAA+C,IAAxBtB,EAAuB,EAAvBA,SAAUuB,EAAa,EAAbA,YAC5C,OACI,qBAAKjC,UAAS,uBAAkBU,EAAS,gBAAgB,IAAMoB,QAASG,EAAxE,SACI,qBAAKjC,UAAU,iBCDZ,SAASkC,EAAT,GAAsD,IAAvBxB,EAAsB,EAAtBA,SAASuB,EAAa,EAAbA,YACnD,OACI,0BAASjC,UAAU,uBAAnB,UACI,cAAC,EAAD,CAAcU,SAAUA,EAAUuB,YAAaA,IAC/C,qBAAKjC,UAAU,oBAAf,uB,MCgSGmC,MAtRf,WAEE,IAcIC,EAdJ,EAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,qBAA1C,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAwCJ,qBAAxC,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAwBN,mBAAS,WAAjC,mBAAOV,EAAP,KAAaiB,EAAb,KAGA,EAAgCP,oBAAS,GAAzC,mBAAO3B,EAAP,KAAiBmC,EAAjB,KAEA,EAAuDR,oBAAS,GAAhE,mBAAOS,EAAP,KAA4BC,EAA5B,KACA,EAAiDV,oBAAS,GAA1D,mBAAOW,EAAP,KAAyBC,EAAzB,KACA,EAA+CZ,oBAAS,GAAxD,mBAAOa,EAAP,KAAwBC,EAAxB,KAEIC,EAAmB,GACnBC,EAAkB,GAElBC,EAAuB,GAsB3B,SAASC,IACP,IAAIC,EASJ,OARAC,IAAMC,IAAIC,EAAQtE,qBAAqB,CACrCuE,YAAa,IAAIH,IAAMI,aAAY,SAAAC,GAAC,OAAIN,EAASM,OAChDC,MAAK,SAAAC,GACNrB,EAAgBqB,EAAIC,KAAKC,gBACzBf,GAAoB,MAIf,kBAAMK,KAGf,SAASW,IACP,IAAIX,EASJ,OARAC,IAAMC,IAAIC,EAAQxE,0BAA0B,CAC1CyE,YAAa,IAAIH,IAAMI,aAAY,SAAAC,GAAC,OAAIN,EAASM,OAChDC,MAAK,SAAAC,GACNzB,EAAWyB,EAAIC,KAAK,IACpBlB,GAAwB,MAInB,kBAAMS,KAGf,SAASY,IACP,IAAIZ,EASJ,OARAC,IAAMC,IAAIC,EAAQvE,sBAAsB,CACtCwE,YAAa,IAAIH,IAAMI,aAAY,SAAAC,GAAC,OAAIN,EAASM,OAChDC,MAAK,SAAAC,GACNvB,EAAiBuB,EAAIC,MACrBhB,GAAqB,MAIhB,kBAAMO,KAsGf,SAASa,EAAgBC,GACvB,IAAIC,EAAoBC,SAASC,uBAAuB,kBAAkB,GACtEC,EAAgBF,SAASC,uBAAuB,iBAAiB,GACjEE,EAAiBH,SAASC,uBAAuB,yBAAyB,GAEtC,SAApCF,EAAkBK,MAAMC,SAA0D,KAApCN,EAAkBK,MAAMC,SACxEN,EAAkBK,MAAMC,QAAU,OAClCH,EAAcE,MAAMC,QAAU,OAC9BF,EAAeG,UAAUC,IAAI,yBAG7BR,EAAkBK,MAAMC,QAAU,OAClCH,EAAcE,MAAMC,QAAU,OAC9BF,EAAeG,UAAUE,OAAO,wBAiBpC,OA3LArB,EAAQ7E,QAAQ6C,GAEhBsD,qBAAU,WACRd,IACAC,IACAb,MAEA,IAEF0B,qBAAU,WACRlC,GAAwB,GACxBE,GAAqB,GACrBE,GAAoB,GAEpBgB,IACAC,IACAb,MACA,CAAC5B,IA0KEmB,GAAyBE,GAAsBE,GAjIpD,WAEE,IAAIgC,EAAe,EACnB1C,EAAc2C,SAAQ,SAAAC,GACpB,IAAIC,EAAS,GAETC,EAAOC,SAASH,EAAKI,SAASC,MAAM,KAAK,GAAGA,MAAM,KAAK,IAC3DJ,EAAOlE,IAAM+D,EACbG,EAAO1E,KAAiB,IAAT2E,EAAc,QAAUA,GAAQ,GAAMA,EAAO,MAAOA,EAAO,GAAK,MAE/ED,EAAOxE,YAAc,CACnBC,OAAQ,CACNX,MAAOF,KAAKC,MAAMkF,EAAKvE,YAAYV,OACnCC,KAAMgF,EAAKvE,YAAYT,MAEzBW,SAAU,CACRZ,MAAOF,KAAKC,MAAgC,EAAzBkF,EAAKvE,YAAYV,MAAU,EAAK,IACnDC,KAAM,MAIViF,EAAOzE,YAAcwE,EAAKxE,YAE1BwC,EAAiBsC,KAAKL,GAEtBH,GAAgB,KA0GpBS,GArGA,WACE,IAAIT,EAAe,EACnBxC,EAAayC,SAAQ,SAAAS,GACnB,IAGIC,EAHAR,EAAS,GAIb,OAAQ,IAAIS,KAAKF,EAAIE,MAAMC,UACzB,KAAK,EACHF,EAAU,SACV,MACF,KAAK,EACHA,EAAU,SACV,MACF,KAAK,EACHA,EAAU,UACV,MACF,KAAK,EACHA,EAAU,YACV,MACF,KAAK,EACHA,EAAU,WACV,MACF,KAAK,EACHA,EAAU,SACV,MACF,KAAK,EACHA,EAAU,WAEdR,EAAOjE,QAAUyE,EAGjBR,EAAOzE,YAAcgF,EAAII,IAAIC,KAG7BZ,EAAOxE,YAAa,CAClBS,QAAQ,CACNR,OAAO,CACLX,MAAOF,KAAKC,MAAM0F,EAAI/E,YAAYS,QAAQnB,OAC1CC,KAAM,KAERW,SAAS,CACPZ,MAAOF,KAAKC,MAAuC,EAAhC0F,EAAI/E,YAAYS,QAAQnB,MAAU,EAAK,IAC1DC,KAAM,MAGVmB,QAAQ,CACNT,OAAO,CACLX,MAAOF,KAAKC,MAAM0F,EAAI/E,YAAYU,QAAQpB,OAC1CC,KAAM,KAERW,SAAS,CACPZ,MAAOF,KAAKC,MAAuC,EAAhC0F,EAAI/E,YAAYU,QAAQpB,MAAU,EAAK,IAC1DC,KAAM,OAMZiF,EAAOlE,IAAM+D,EAEb7B,EAAgBqC,KAAKL,GACrBH,GAAgB,KAGlB9C,EAAmBiB,EAAgB,GACnCA,EAAgB6C,OAAO,EAAE,GAoC3BC,GAGK7C,EADDhB,EAAQ8D,UACc,gBADkB,kBAQ1C,mCACA,sBAAKpG,UAAW,oBAAoBsD,EAApC,UACE,0BAAStD,UAAU,wBAAwB8B,QAASuC,EAApD,UACE,wBAAW,wBAAW,2BAGxB,yBAASrE,UAAU,iBAAiB8B,QAASuC,IAC7C,yBAASrE,UAAU,gBAAnB,SACE,0BAASA,UAAU,oBAAnB,UACE,qBAAKA,UAAU,eAAf,kBACA,cAAC+B,EAAD,CAAUpD,SAAW0H,EAAO1H,SAAUiD,WAnC9C,SAAoB0C,GAEbA,EAAEgC,OAAOxB,UAAUyB,SAAS,gBAAkBjC,EAAEgC,OAAOxB,UAAUyB,SAAS,eAEzE3D,EAAQ0B,EAAEgC,OAAOE,cAAc/B,uBAAuB,eAAe,GAAGgC,WAGxE7D,EAAQ0B,EAAEgC,OAAO7B,uBAAuB,eAAe,GAAGgC,YA4BK5E,YAAaF,IAE5E,qBAAK3B,UAAU,eAAf,wBACA,cAACkC,EAAD,CAAqBxB,SAAUA,EAAUuB,YAlBjD,SAAqBqC,GACnBzB,GAAanC,WAsBX,0BAASV,UAAU,uBAAnB,UAEE,0BAASA,UAAU,gBAAnB,UAEE,cAACM,EAAD,CAAUC,aAAcoB,IACxB,cAACrC,EAAD,CACEC,UAAYmB,EAAW4B,EAAQzB,YAAYC,OAAQwB,EAAQzB,YAAYE,SACvEvB,YAAe,uBAAwB8C,EAAQ1B,YAAa,OAC5DnB,UAAaiB,EAAW4B,EAAQoE,oBAAoB5F,OAAQwB,EAAQoE,oBAAoB3F,SACxFrB,mBAAsB4C,EAAQqE,YAC9BhH,SAAY2C,EAAQsE,iBACpBhH,UAAac,EAAW4B,EAAQuE,KAAKC,MAAMhG,OAAQwB,EAAQuE,KAAKC,MAAM/F,SACtElB,cAAiByC,EAAQuE,KAAKE,UAAUC,QACxClH,SAAYY,EAAW0B,EAAiBvB,YAAYS,QAAQR,OAAOX,MAAOiC,EAAiBvB,YAAYS,QAAQP,SAASZ,MACxHJ,QAAWW,EAAW0B,EAAiBvB,YAAYU,QAAQT,OAAOX,MAAOiC,EAAiBvB,YAAYU,QAAQR,SAASZ,WAI3H,0BAASH,UAAU,iBAAnB,UAEE,qBAAKA,UAAU,eAAf,4BACA,cAACgB,EAAD,CACEC,kBAAqBmC,EACrB1C,SAAYA,IAGd,qBAAKV,UAAU,eAAf,2BACA,cAACwB,EAAD,CACEC,iBAAoB4B,EACpB3C,SAAYA,gBA5DwD,gBC3NhFuG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3C,SAAS4C,eAAe,W","file":"static/js/main.484ddd03.chunk.js","sourcesContent":["import cityList from \"./city-list\"\n\nlet currentConditionsURL \nlet hourlyForcastURL \nlet dailyForcastURL\n\n\nfunction initURL(cityName){\n    let cityID = (cityList.cityList.find((elm) => elm.cityName === cityName)).apiID\n\n    // let key = 'pGuO66eACAaohMRWg609GScW6WhSfrBS'\n    let key = 'AGGlEh0AJojABzAfRuCHS7obG6AB9arV'\n\n    currentConditionsURL = `http://dataservice.accuweather.com/currentconditions/v1/${cityID}?apikey=${key}&details=true`\n    hourlyForcastURL = `http://dataservice.accuweather.com/forecasts/v1/hourly/12hour/${cityID}?apikey=${key}&metric=true`\n    dailyForcastURL = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityID}?apikey=${key}&metric=true`\n\n}\n\nfunction getCurrentConditionsURL(){\n    return currentConditionsURL\n}\n\nfunction getHourlyForcastURL(){\n    return hourlyForcastURL\n}\n\nfunction getDailyForcastURL(){\n    return dailyForcastURL\n}\n\n\nexport default {initURL ,getCurrentConditionsURL, getHourlyForcastURL, getDailyForcastURL}\n\n// AGGlEh0AJojABzAfRuCHS7obG6AB9arV","const cityList = [\n    {\n        cityName: 'Toronto',\n        apiID: 55488\n    },{\n        cityName: 'North York',\n        apiID: 49569\n    },{\n        cityName: 'Hamilton',\n        apiID: 55490\n    },{\n        cityName: 'Aurora',\n        apiID: 55098\n    },{\n        cityName: 'London',\n        apiID: 55489\n    }\n]\n\nexport default {cityList}","export default function CurrentWeatherCondition({tempDigit, imageSource, feelsTemp, currentWeatherText, humidity, windSpeed, windDirection, highTemp, lowTemp}){\n    return(\n\n        <section className='currentWeatherSection'>\n            <section className='currentWeatherNumaricSection'> \n                <section className='currentWeatherDigit'>\n                    <section className='nowWeatherDigit'>{Math.round(tempDigit.Value)}°</section>\n                    <section className='tempDigitType'>{tempDigit.Unit}</section>\n                </section>\n                <section className='feelsSection'>Feels: {Math.round(feelsTemp.Value)}°</section>\n                <section className='currentConditionHighTemp'>H: {highTemp}°</section>\n                <section className='currentConditionLowTemp'>L: {lowTemp}°</section>\n            </section>\n            <div className='currentWeatherImagery'>\n                <img className='currentWeatherIcon' src={imageSource}/>\n                <section className='currentWeatherText'>{currentWeatherText}</section>\n\n                <section className='currentWeatherStatus'>\n                    <section className='currentHumidity'>Humidity: <b>{humidity}%</b></section>\n                    <section className='currentWind'>Wind: <b>{Math.round(windSpeed.Value)} {windSpeed.Unit}</b></section>\n                    <section className='currentDirection'>Direction: <b>{windDirection}</b></section>\n                </section>\n            </div>\n\n        </section>\n    )\n}","export default function CityName({cityLocation}){\n    return(\n        <section className='cityLocationSection'>\n            {cityLocation}\n        </section>\n    )\n}","import React from \"react\"\nexport default function HourlyForcastItem({forcastItem, isMetric}){\n    return (\n        <section className='hourlyForcastItem'>\n            <div className='hourlyForcastTime'>{forcastItem.Time}</div>\n            <img className='hourlyForcastImage' src={'./accuWeather-icons/'+ forcastItem.WeatherIcon +'.svg'}/>\n            <div className='hourlyForcastTemp'>{(isMetric) ? forcastItem.Temperature.Metric.Value : forcastItem.Temperature.Imperial.Value}°</div>\n        </section>\n    )\n}","import HourlyForcastItem from \"./HourlyForcastItem\"\nimport React from \"react\"\n\nexport default function HourlyForcast({hourlyForcastList, isMetric}){\n    \n    return(\n            <section className='hourlyForcastSection'>\n                {hourlyForcastList.map(forcastItem =>{\n                return <HourlyForcastItem key={forcastItem.Key} forcastItem={forcastItem} isMetric={isMetric}/>\n                })}\n            </section>\n    )\n}","import React from \"react\"\nexport default function HourlyForcastItem({forcastItem, isMetric}){\n    return (\n        <section className='dailyForcastItem'>\n            <div className='dailyNameDiv'>{forcastItem.DayName}</div>\n            <img className='dailyForcastImage' width='30px'src={'./accuWeather-icons/'+ forcastItem.WeatherIcon +'.svg'}/>\n            <div className='highTempDailyForcastDiv'>{(isMetric) ? forcastItem.Temperature.Maximum.Metric.Value : forcastItem.Temperature.Maximum.Imperial.Value}°</div>\n            <div className='lowTempDailyForcastDiv'>{(isMetric) ? forcastItem.Temperature.Minimum.Metric.Value : forcastItem.Temperature.Minimum.Imperial.Value}°</div>\n        </section>\n    )\n}","import DailyForcastItem from \"./DailyForcastItem\"\nimport React from \"react\"\n\nexport default function DailyForcast({dailyForcastList, isMetric}){\n\n    return (\n            <section className='daiylyForcastSection'>\n                {dailyForcastList.map(forcastItem =>{\n                return <DailyForcastItem key={forcastItem.Key} forcastItem={forcastItem} isMetric={isMetric}/>\n                })}\n            </section>\n    )\n}","export default function CityItem ({city, selectCity, currentCity}){\n    \n\n    return(\n        <section className= {`cityItemSection ${currentCity === city.cityName?'selectedCity':''}`} onClick={selectCity}>\n            <div className='selectorDiv'></div>\n            <div className='cityNameDiv'>{city.cityName}</div>\n        </section>\n    )\n}","import CityItem  from \"./CityItem\"\nexport default function CityList({cityList, selectCity, currentCity}){\n    return (\n        <section className='cityListSection'>\n            {cityList.map(city =>{\n                return <CityItem key={city.apiID} city={city} selectCity={selectCity} currentCity={currentCity}/>\n            })}\n        </section>\n    )\n}","export default function toggleButton({isMetric, toggleClick}){\n    return(\n        <div className={`toggleBorder ${isMetric?'clickedToggle':''}`} onClick={toggleClick}>\n            <div className='toggleBall'></div>\n        </div>\n    )\n}","import ToggleButton from './toggle-button'\n\nexport default function ToggleMessuringType ({isMetric,toggleClick}){\n    return(\n        <section className='messuringTypeSection'>\n            <ToggleButton isMetric={isMetric} toggleClick={toggleClick}/>\n            <div className='messuringTypeText'>Metric</div>\n        </section>\n    )\n}","import React, {useState, useEffect} from \"react\";\nimport axios from \"axios\";\nimport apiURLs from './api-url-links';\nimport cities from './city-list'\n\nimport CurrentWeatherCondition from './CurrentWeatherCondition'\nimport CityName from './CityName'\nimport HourlyForcast from './HourlyForcast'\nimport DailyForcast from './DailyForcast'\nimport CityList from './CityList'\nimport ToggleMessuringType from './ToggleMessuringType'\n\n\nimport './styles.css'\n\n\nfunction App() { \n\n  const [weather, setWeather] = useState()\n  const [hourlyForcast, setHourlyForcast] = useState()\n  const [dailyForcast, setDailyForcast] = useState()\n  const [city, setCity] = useState('Toronto')\n  \n\n  const [isMetric, setIsMetric] = useState(true) \n\n  const [loadCurrentCondition,setLoadCurrentCondition] = useState(false)\n  const [loadHourlyForcast,setLoadHourlyForcast] = useState(false)\n  const [loadDailyForcast,setLoadDailyForcast] = useState(false)\n\n  let newHourlyForcast = []\n  let newDailyForcast = []\n  let todayTempHighLow \n  let backgroundImageStyle = ''\n  \n\n  apiURLs.initURL(city)\n\n  useEffect(()=>{\n    getCurrentCondition()\n    getHourlyForcast()\n    getDailyForcast()\n\n  },[])\n\n  useEffect(()=>{\n    setLoadCurrentCondition(false)\n    setLoadHourlyForcast(false)\n    setLoadDailyForcast(false)\n\n    getCurrentCondition()\n    getHourlyForcast()\n    getDailyForcast()\n  },[city])\n\n  function getDailyForcast(){\n    let cancel\n    axios.get(apiURLs.getDailyForcastURL(),{\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      setDailyForcast(res.data.DailyForecasts)\n      setLoadDailyForcast(true)\n    })\n\n\n    return () => cancel()\n  }\n\n  function getCurrentCondition(){\n    let cancel\n    axios.get(apiURLs.getCurrentConditionsURL(),{\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      setWeather(res.data[0])\n      setLoadCurrentCondition(true)\n    })\n\n\n    return () => cancel()\n  }\n\n  function getHourlyForcast(){\n    let cancel\n    axios.get(apiURLs.getHourlyForcastURL(),{\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      setHourlyForcast(res.data)\n      setLoadHourlyForcast(true)\n    })\n\n\n    return () => cancel()\n  }\n\n  function cleanOutHourlyForcast(){\n\n    let countElement = 1\n    hourlyForcast.forEach(hour => {\n      let newElm = {}\n      // time\n      let time = parseInt(hour.DateTime.split('T')[1].split(':')[0])\n      newElm.Key = countElement\n      newElm.Time = (time === 0) ? '12 AM' :(time <= 12) ? time + ' AM': time - 12 + ' PM'\n      // Temp\n      newElm.Temperature = {\n        Metric: {\n          Value: Math.round(hour.Temperature.Value), \n          Unit: hour.Temperature.Unit\n        },\n        Imperial: {\n          Value: Math.round((hour.Temperature.Value * 9/5) + 32), \n          Unit: 'F'\n        }\n      }\n      // Weather Icon\n      newElm.WeatherIcon = hour.WeatherIcon\n\n      newHourlyForcast.push(newElm)\n\n      countElement += 1\n    })\n\n  }\n\n  function cleanOutDailyForcast(){\n    let countElement = 1\n    dailyForcast.forEach(day => {\n      let newElm = {}\n      \n      // Name of the day\n      let dayName\n      switch (new Date(day.Date).getDay()) {\n        case 0:\n          dayName = \"Sunday\";\n          break;\n        case 1:\n          dayName = \"Monday\";\n          break;\n        case 2:\n          dayName = \"Tuesday\";\n          break;\n        case 3:\n          dayName = \"Wednesday\";\n          break;\n        case 4:\n          dayName = \"Thursday\";\n          break;\n        case 5:\n          dayName = \"Friday\";\n          break;\n        case 6:\n          dayName = \"Saturday\";\n      }\n      newElm.DayName = dayName\n\n      // Weather Icon\n      newElm.WeatherIcon = day.Day.Icon\n\n      // High & Low Temp\n      newElm.Temperature ={\n        Maximum:{\n          Metric:{\n            Value: Math.round(day.Temperature.Maximum.Value),\n            Unit: 'C'\n          },\n          Imperial:{\n            Value: Math.round((day.Temperature.Maximum.Value * 9/5) + 32),\n            Unit: 'F'\n          }\n        },\n        Minimum:{\n          Metric:{\n            Value: Math.round(day.Temperature.Minimum.Value),\n            Unit: 'C'\n          },\n          Imperial:{\n            Value: Math.round((day.Temperature.Minimum.Value * 9/5) + 32),\n            Unit: 'F'\n          }\n        }\n      }\n\n      // Key\n      newElm.Key = countElement\n\n      newDailyForcast.push(newElm)\n      countElement += 1\n    })\n\n    todayTempHighLow = newDailyForcast[0]\n    newDailyForcast.splice(0,1)\n  }\n\n  function showSideBarMenu(e){\n    let darkBackgroundElm = document.getElementsByClassName('darkBackground')[0]\n    let sideMenuPanel = document.getElementsByClassName('sideMenuPanel')[0]\n    let sideMenuButton = document.getElementsByClassName('sideMenuButtonSection')[0]\n    \n    if (darkBackgroundElm.style.display === 'none' || darkBackgroundElm.style.display === ''){\n      darkBackgroundElm.style.display = 'flex'\n      sideMenuPanel.style.display = 'flex'\n      sideMenuButton.classList.add('closeSideMenuButton')\n    }\n    else{\n      darkBackgroundElm.style.display = 'none'\n      sideMenuPanel.style.display = 'none'\n      sideMenuButton.classList.remove('closeSideMenuButton')\n    }\n  }\n\n\n  function selectCity(e){\n    \n      if(e.target.classList.contains('cityNameDiv') || e.target.classList.contains('selectorDiv')){\n\n          setCity(e.target.parentElement.getElementsByClassName('cityNameDiv')[0].innerHTML)\n\n      }else{\n          setCity(e.target.getElementsByClassName('cityNameDiv')[0].innerHTML)\n      }\n  }\n\n\n  if (!loadCurrentCondition || !loadHourlyForcast || !loadDailyForcast) {return 'Loading ....'}\n  \n  cleanOutHourlyForcast()\n  cleanOutDailyForcast()\n\n  if(!weather.IsDayTime){backgroundImageStyle='nightBackground'}\n  else{backgroundImageStyle='dayBackground'}\n\n  function toggleClick(e){\n    setIsMetric(!isMetric)\n  }\n\n  return (\n    <>\n    <div className={'weatherPreviewBG '+backgroundImageStyle}>\n      <section className='sideMenuButtonSection' onClick={showSideBarMenu}>\n        <div></div><div></div><div></div>\n      </section>\n\n      <section className='darkBackground' onClick={showSideBarMenu}></section>\n      <section className='sideMenuPanel'>\n        <section className='sideMenuContainer'>\n          <div className='sideBarTitle'>City</div>\n          <CityList cityList ={cities.cityList} selectCity= {selectCity} currentCity={city}/>\n\n          <div className='sideBarTitle'>Properties</div>\n          <ToggleMessuringType isMetric={isMetric} toggleClick={toggleClick}/>\n        </section>\n      </section>\n\n      \n      <section className='weatherDetailSection'>\n\n        <section className='leftPartPanel'>\n          \n          <CityName cityLocation={city}/>\n          <CurrentWeatherCondition \n            tempDigit= {isMetric ? weather.Temperature.Metric: weather.Temperature.Imperial}\n            imageSource = {'./accuWeather-icons/'+ weather.WeatherIcon +'.svg'}\n            feelsTemp = {isMetric ? weather.RealFeelTemperature.Metric: weather.RealFeelTemperature.Imperial}\n            currentWeatherText = {weather.WeatherText}\n            humidity = {weather.RelativeHumidity}\n            windSpeed = {isMetric ? weather.Wind.Speed.Metric: weather.Wind.Speed.Imperial}\n            windDirection = {weather.Wind.Direction.English}\n            highTemp = {isMetric ? todayTempHighLow.Temperature.Maximum.Metric.Value: todayTempHighLow.Temperature.Maximum.Imperial.Value}\n            lowTemp = {isMetric ? todayTempHighLow.Temperature.Minimum.Metric.Value: todayTempHighLow.Temperature.Minimum.Imperial.Value}\n          />\n        </section>\n        \n        <section className='rightPartPanel'>\n          \n          <div className='sectionTitle'>Hourly Forcast</div>\n          <HourlyForcast \n            hourlyForcastList = {newHourlyForcast} \n            isMetric = {isMetric}\n          />\n\n          <div className='sectionTitle'>Daily Forcast</div>\n          <DailyForcast\n            dailyForcastList = {newDailyForcast}\n            isMetric = {isMetric}\n          />\n        </section>\n      </section>\n      \n    </div>\n    \n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}